//   
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.



//
// Types
//

var Kind;
(function (Kind) {
})(Kind || (Kind = {}))

class Empty {
  constructor(_data) {
    this._data = {}
    if (_data) {
      
    }
  }
  
  toJSON() {
    return this._data
  }
}

class User {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['ID'] = _data['ID']
      this._data['username'] = _data['username']
      this._data['createdAt'] = _data['createdAt']
      
    }
  }
  get ID() {
    return this._data['ID']
  }
  set ID(value) {
    this._data['ID'] = value
  }
  get username() {
    return this._data['username']
  }
  set username(value) {
    this._data['username'] = value
  }
  get createdAt() {
    return this._data['createdAt']
  }
  set createdAt(value) {
    this._data['createdAt'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

class ExampleService {
  constructor(hostname, fetch) {
    this.path = '/rpc/ExampleService/'
    this.hostname = hostname
    this.fetch = fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  getUser = (args, headers) => {
    return this.fetch(
      this.url('GetUser'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          user: (_data.user)
        }
      })
    })
  }
  
  ping = (headers) => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          bool: (_data.bool)
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
